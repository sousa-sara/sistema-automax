package modelo;

/**
 * Classe que representa um usu√°rio administrador
 * Herda de Usuario e implementa comportamentos espec√≠ficos (heran√ßa e polimorfismo)
 * 
 * @author Equipe AutoMax
 * @version 1.0
 */
public class Administrador extends Usuario {

    /**
     * Construtor da classe Administrador
     * @param nome Nome completo do administrador
     * @param cpf CPF do administrador
     * @param email Email do administrador
     * @param login Login para acesso ao sistema
     * @param senha Senha para acesso ao sistema
     */
    public Administrador(String nome, String cpf, String email, String login, String senha) {
        super(nome, cpf, email, login, senha); // Chama o construtor da classe pai
    }

    /**
     * Implementa√ß√£o do m√©todo abstrato da classe pai (polimorfismo)
     * Exibe o perfil espec√≠fico do administrador
     */
    @Override
    public void exibirPerfil() {
        System.out.println("Perfil: Administrador - " + getNome());
        System.out.println("Permiss√µes: Acesso total ao sistema");
    }

    /**
     * M√©todo espec√≠fico do administrador para gerenciar usu√°rios
     * @param acao A√ß√£o a ser realizada (criar, editar, excluir)
     * @param usuario Usu√°rio alvo da a√ß√£o
     */
    public void gerenciarUsuario(String acao, Usuario usuario) {
        System.out.println("Administrador " + getNome() + " executando a√ß√£o: " + acao);
        if (usuario != null) {
            System.out.println("Usu√°rio alvo: " + usuario.getNome());
        }
    }

    /**
     * M√©todo espec√≠fico para administradores gerenciarem o sistema
     */
    public void gerenciarSistema() {
        System.out.println("üîß " + getNome() + " acessando configura√ß√µes do sistema...");
    }

    /**
     * Sobrescrita do m√©todo exibirInformacoes para incluir informa√ß√µes espec√≠ficas
     */
    @Override
    public void exibirInformacoes() {
        super.exibirInformacoes(); // Chama o m√©todo da classe pai
        System.out.println("Privil√©gios: Administrador do Sistema");
        System.out.println("Pode: Gerenciar usu√°rios, projetos, equipes e configura√ß√µes");
    }

    /**
     * M√©todo para validar se pode executar opera√ß√µes administrativas
     * @return true sempre, pois administrador tem acesso total
     */
    public boolean podeGerenciarUsuarios() {
        return true;
    }

    /**
     * M√©todo para validar se pode acessar relat√≥rios administrativos
     * @return true sempre, pois administrador tem acesso total
     */
    public boolean podeAcessarRelatoriosAdmin() {
        return true;
    }

    /**
     * M√©todo para resetar senhas de outros usu√°rios
     * @param usuario Usu√°rio que ter√° a senha resetada
     * @param novaSenha Nova senha a ser definida
     */
    public void resetarSenhaUsuario(Usuario usuario, String novaSenha) {
        if (usuario != null) {
            usuario.setSenha(novaSenha);
            System.out.println("Administrador " + getNome() + " resetou a senha de " + usuario.getNome());
        }
    }

    /**
     * M√©todo para gerar relat√≥rio completo do sistema
     */
    public void gerarRelatorioSistema() {
        System.out.println("RELAT√ìRIO COMPLETO DO SISTEMA");
        System.out.println("Gerado por: Administrador " + getNome());
        System.out.println("Data: " + java.time.LocalDate.now());
        System.out.println("‚ïê".repeat(50));
    }
}